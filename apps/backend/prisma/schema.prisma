generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiRequest {
  id        String @id @default(cuid())
  apiSecret String
}

model User {
  id                  String     @id @default(cuid())
  username            String     @unique
  email               String     @unique
  contactNumber       String     @default("NOT_PROVIDED")
  password            String
  role                Role       @default(STUDENT)
  isMailVerified      Boolean    @default(false)
  otpForVerification  String     @default("")
  otpForResetPassword String     @default("")
  provider            String     @default("email") // 'email', 'phone', 'google', 'github'
  providerId          String?
  bookmarks           Bookmark[]
  downloads           Download[]
  uploads             Resource[]
  avatar              Avatar[]
  UserAddedAt         DateTime   @default(now())
  UserUpdatedAt       DateTime   @updatedAt

  posts           Post[]         @relation("UserPosts")
  replies         Reply[]        @relation("UserReplies")
  votes           Vote[]
  mentorProfile   MentorProfile?
  reportsMade     Report[]       @relation("ReportsBy")
  reportsReceived Report[]       @relation("ReportsAgainst")
}

model Avatar {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique
  url       String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String // Foreign key to User's Table
}

model ContactUsResponse {
  id            Int      @id @default(autoincrement())
  fullName      String
  email         String
  contactNumber String
  message       String
  createdAt     DateTime @default(now())
}

model Course {
  id         String   @id @default(cuid())
  courseName String   @unique // BTECH, DIPLOMA, etc...
  branches   Branch[] // this is one to many
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Branch {
  id         String     @id @default(cuid())
  branchName String     @unique // Common (for First Year), CSE, IOT, etc..
  courseId   String
  course     Course     @relation(fields: [courseId], references: [id])
  semesters  Semester[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Semester {
  id        String    @id @default(cuid())
  semNumber Int       @unique // 0, 3, 4  etc. (0 represents first year, (1 & 2 Sem) Common for all branches)
  branchId  String
  branch    Branch    @relation(fields: [branchId], references: [id])
  subjects  Subject[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Subject {
  id          String     @id @default(cuid())
  subjectName String     @unique
  subjectCode String     @unique
  semesterId  String
  semester    Semester   @relation(fields: [semesterId], references: [id])
  resources   Resource[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Resource {
  id           String       @id @default(cuid())
  type         ResourceType // Notes, Books, etc. see the resource type below
  title        String
  year         String?
  month        String?
  description  String?
  fileUrl      String // for example: Google Drive URL, etc
  fileSize     Float // in KB
  fileType     String // pdf, docx, etc.
  subjectId    String
  subject      Subject      @relation(fields: [subjectId], references: [id])
  uploadedById String
  uploadedBy   User         @relation(fields: [uploadedById], references: [id])
  bookmarks    Bookmark[]
  downloads    Download[]
  verified     Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Bookmark {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id])
  createdAt  DateTime @default(now())
}

model Download {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  resourceId   String
  resource     Resource @relation(fields: [resourceId], references: [id])
  downloadedAt DateTime @default(now())
}

model MentorProfile {
  id            String         @id @default(cuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @unique
  category      MentorCategory // FACULTY, ALUMNI, SENIOR
  bio           String?
  expertise     String[]
  hourlyRate    Float?
  rating        Float?         @default(0)
  introVideoUrl String? // Optional intro video URL
  linkedinUrl   String? // Optional social handle
  twitterUrl    String? // Optional social handle
  githubUrl     String? // Optional social handle
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Post {
  id           String       @id @default(cuid())
  title        String
  content      String       @db.Text
  isAnonymous  Boolean      @default(false)
  doubtCleared Boolean      @default(false) // New field
  authorId     String
  author       User         @relation("UserPosts", fields: [authorId], references: [id])
  replies      Reply[]
  votes        Vote[]
  tags         String[]
  attachments  Attachment[] // New relation
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Reply {
  id          String       @id @default(cuid())
  content     String       @db.Text
  authorId    String
  author      User         @relation("UserReplies", fields: [authorId], references: [id])
  postId      String
  post        Post         @relation(fields: [postId], references: [id])
  votes       Vote[]
  attachments Attachment[] // New relation for mentor attachments
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Vote {
  id      String   @id @default(cuid())
  type    VoteType // UPVOTE or DOWNVOTE
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  postId  String?
  post    Post?    @relation(fields: [postId], references: [id])
  replyId String?
  reply   Reply?   @relation(fields: [replyId], references: [id])

  @@unique([userId, postId]) // User can only vote once per post
  @@unique([userId, replyId]) // User can only vote once per reply
}

enum Role {
  STUDENT
  ADMIN
  MENTOR
}

model Attachment {
  id      String  @id @default(cuid())
  url     String // URL from a service like Cloudinary
  type    String // e.g., 'image/png', 'application/pdf'
  postId  String?
  post    Post?   @relation(fields: [postId], references: [id])
  replyId String?
  reply   Reply?  @relation(fields: [replyId], references: [id])
}

model Report {
  id             String   @id @default(cuid())
  reason         String
  reporterId     String
  reporter       User     @relation("ReportsBy", fields: [reporterId], references: [id])
  reportedUserId String
  reportedUser   User     @relation("ReportsAgainst", fields: [reportedUserId], references: [id])
  createdAt      DateTime @default(now())
}

enum ResourceType {
  SHIVANI_BOOKS
  MID_SEM_PAPER
  END_SEM_PAPER
  IMP_QUESTION
  IMP_TOPIC
  NOTES
  LAB_MANUAL
  SYLLABUS
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum MentorCategory {
  FACULTY
  ALUMNI
  SENIOR
}
